* 一起来飞车工作记录
** 开发任务 [42/43]
- [X] 资源释放不及时 [2/2]
  - [X] 场景背景音乐释放不及时 <2016-09-08 Thu>
  - [X] ResLoading背景图释放不及时 <2016-09-08 Thu>
- [X] 优化后视镜 [2/2]
  - [X] 后视镜摄像机参数调整 <2016-09-09 Fri>
  - [X] RenderTexture参数调整 <2016-09-09 Fri>
- [X] BaseLoad和BaseGenerate有缓存机制，赛车加载完没有释放一直在缓存中 [1/1]
  - [X] 把缓存机制去掉，具体业务模块需要做缓存就自己实现 <2016-09-10 Sat>
- [X] 香港赛道里教堂处的门车经过前打开 <2016-09-14 Wed>
- [X] 性能优化 [100%]
  - [X] 比赛中碰撞优化，减去front，back，pathNodeCollider三个碰撞盒子 <2016-09-12 Mon>
- [X] 档位适配再优化 [100%]
  - [X] 特效适配（高速线，加速线等） <2016-10-26 Wed>
  - [X] 后视镜开关 <2016-10-26 Wed>
  - [X] 动态模糊开关 <2016-10-26 Wed>
  - [X] 档位逻辑判断条件做成可配表的方式，方便调整 <2016-10-19 Wed>
- [X] 修改漂移集气公式 <2016-09-16 Fri> 
- [X] 小喷，双喷时可以使用氮气 <2016-09-17 Sat>
- [X] 减速带功能实现 <2016-09-17 Sat>
- [X] 合并大陆版本部分功能到台湾分支 [4/4]
  - [X] pvp比赛属性补偿机制 <2016-09-18 Sun>
  - [X] 调整集气速率 <2016-09-18 Sun>
  - [X] 比赛中状态及反馈的优化第二期;道具赛优化、增加后视镜和道具镜头 <2016-09-18 Sun>
  - [X] 比赛中竞速体验优化（车辆动作、人物动作），第二期；大喷镜头拉伸曲线调整 <2016-09-18 Sun>
- [X] 背景音乐新需求 <2016-09-18 Sun>
- [X] 优化AssetBundle加载类AssetBundleLoader加载速度（使用了AssetBundle.CreateFromMemoryImmediate同步函数导致卡帧，换成使用WWW.assetbundle和AssetBundle.CreateFromMemory方法） <2016-09-20 Tue>
- [X] 调整漂移后触发小喷的时机 <2016-09-22 Thu>
- [X] 进入比赛切换背景音乐 <2016-09-23 Fri>
- [X] 去掉抗锯齿 <2016-09-23 Fri>
- [X] 比赛中存在两个AudioListener（一个在RaceMainCamera，一个在GlobalDelegate中），导致每一帧都会打印警告Log <2016-09-23 Fri>
- [X] 香港地图有部分路面没有在小地图中出现 <2016-09-23 Fri>
- [X] 香港地图有部分路面没有阴影（shader中忽略了投影） <2016-09-27 周二>
- [X] 游戏切换后台不发送心跳，防止切后台挂机现象 <2016-09-29 周四>
- [X] UWA优化 [7/7]
  - [X] 去掉不合理的GC.Collect()，进入比赛前调用，防止比赛时触发GC <2016-09-29 周四>
  - [X] TTF字体检查（多余字体） <2016-10-01 周六>
  - [X] 后视镜Panel优化 <2016-10-11 周二>
  - [X] 加密资源分类（场景，人物，赛车加密，其它可以考虑不加密） <2016-10-10 周一>
  - [X] 打包使用Optimize Mesh Data <2016-09-29 周四>
  - [X] 比赛资源预加载（例如特效） <2016-10-11 周二>
    - [X] ResourcesCollect增加缓存 <2016-10-11 周二>
  - [X] 个人信息和大厅隐藏3DBackGround减少DrawCall <2016-10-13 周四>
- [X] 优化地图编辑器的功能，方便策划配置跳台路径 <2016-10-18 Tue>
- [X] 大喷特效可配置，不同等级的赛车特效不同 <2016-10-29 六>
- [X] SS级别的赛车大喷的时候增加翅膀特效 <2016-10-29 六>
- [X] 大喷特效动态模糊过度 <2016-10-31 一>
- [X] 小喷特效可配置 <2016-11-09 Wed>
- [ ] 常驻内存规划
- [X] 制定下个版本优化计划
- [X] 小喷改成手动触发 <2016-11-22 Tue>
- [X] 统计比赛中的最小帧率和平均帧率 <2016-11-28 Mon>
- [X] 分析Testin测试报告 <2016-11-26 Sat>
- [X] 增加录制视频用的上帝视角和前置视角 <2016-11-23 Wed>
- [X] 增加漂移时摩擦力系数可调整摩擦力 <2016-11-24 Thu>
- [X] 增加比赛摄像机配置参数 <2016-12-02 Fri>
- [X] 人物动作文件改成CSV格式 <2016-12-02 Fri>
- [X] 增加大小喷结束后减速系数 <2016-12-05 Mon>
- [X] 增加demo中赛车参数存档功能 <2016-12-06 Tue>
- [X] 增加空喷玩法 <2016-12-08 Thu>
- [X] 增加落地喷玩法 <2016-12-08 Thu>
- [X] 双喷手动触发 <2016-12-08 Thu>
- [X] 加速带效果换成大喷效果，持续时间可配置，暂定2.5s <2016-12-08 Thu>
- [X] 空中赛车平衡 <2016-12-08 Thu>
- [X] 空喷的重力可配置调整 <2016-12-08 Thu>
- [X] 大喷增加破风特效 <2016-12-09 Fri>

** 解决bug记录
- [X] 解决台湾版本新车冲过终点后穿墙 <2016-09-14 Wed>
- [X] 解决大喷连续释放两个的问题 <2016-09-20 Tue>
- [X] 连续加速带大喷停止不了 <2016-09-23 Fri>
- [X] 运动模糊结束不了(原因是大喷没结束时，触发重置赛车，赛车大喷状态被重置没有调用回调，因此没有调用隐藏模糊的代码) <2016-11-09 Wed>
- [X] QTE位置不准确(中道具时处理QTE写死了0.25s时间) <2016-11-10 Thu>

** 问题总结
- 工程中如果启用了抗锯齿， 使用了后期特效（例如动态模糊）void OnRenderImage(RenderTexture src, RenderTexture dest)会十分卡，通过查看profiler初步知道是GrabPixes函数耗时很长，并且是因为开启了抗锯齿才导致性能明显低下。
- 工程开启了抗锯齿又想使用后期特效，可以把摄像机的内容渲染到RenderTexture上，然后对RenderTexture做后期特效，效率有明显提升。
- shader中如果使用了alphatest，则最终输出的颜色通道只有RGB，没有输出Alpha，导致小地图（或者其它使用情况下）会显示不了物体，解决办法：不使用alphatest，自己实现alpha值比较，用discard或者clip。
- OnPreRender（在相机渲染场景之前被调用），OnPostRender（在相机完成场景渲染之后被调用）两个函数可绕过因为开了抗锯齿而导致OnRenderImage很慢的问题。
- 我们的工程中图标Icon和服装Cloth的AssetBundle名字一样（但是放在了不同的目录，在加载服装AssetBundle后不释放AssetBundle然后再加载同名的图标，会报错（提示：can't be loaded because another asset bundle with the same files are already），这是因为我们打包AssetBundle资源时加上了BuildAssetBundleOptions.DeterministicAssetBundle（在资源更新时，只有确保资源不会每次Build时都会产生不同的MD5值，才能确保资源的增量更新BuildPipeline.BuildAssetBundle  在build的时候添加一个选项 | BuildAssetBundleOptions.DeterministicAssetBundle 这样就能确保这份资源的唯一性），手动修改AssetBundle的名字还是不能解决，只能打包的时候指定不同的名字。 <2016-10-25 Tue>

** 内存优化总结 
1. 合理规划图集
   - 比赛中可能只用到了一些图集里面的一两张Sprite，其它Sprite没用到，浪费了大部分的内存；我们通过拆分现有的图集，再重新打图集，把比赛中用到的整合在一起
2. 减少图集的空白区域
   - 我们有不少图集是1024*1024或者2048*2048，而且很大面积是空白的，因此要针对这部分图集的空白区域进行利用，或者重新拆分整理，减少浪费
3. unity核心库的精简
   - 通过查看profiler分析，看出unity有个资源System.ExecutableAndDlls占用了113MB得内存，是内存占用大户，后来经过搜索相关资料，设置了StrippingLevel选项，减少了7MB的内存
   - 相关的资料说明:
     - System.ExecutableAndDlls：系统可执行程序和DLL，是只读的内存，用来执行所有的脚本和DLL引用。不同平台和不同硬件得到的值会不一样，可以通过修改Player Setting的Stripping Level来调节大小
   - 另外还有相关的资料可以减少DLL大小:
     - 无论从减少安装包大小还是迎合unity64位IL2CPP默认就会打开StrippingLevel功能，通过库剖离来减少DLL的空间大小
     - 那么问题是我们自定义库使用了一些type，例如xml，或者webclient c#封装的http请求等，如果被任性解剖出去，那么肯定是不允许的
