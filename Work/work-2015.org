* 工作记录
** 日常任务
- [X] 基于cocos2dx-3.3做lua扩展及控件扩展，实现公司的新游戏开发框架WYDEngine，基本功能的开发工作已经完成 <2015-02-01 Sun>
- [X] 用QT5.3开发WYDEngine配套使用的ui编辑器，基本功能的开发工作已经完成 <2015-02-01 Sun>
- 一些总结:
  - 本次开发的新游戏框架跟之前的2.x版本有较大的区别：
    1. 在不大量修改cocos2dx的前提下，做lua扩展，让lua和c++交互更方便
    2. 自定义的控件是继承cocos2dx的控件，这样做的好处是我们自定义的控件能较好的融合到cocos2dx里面，代码逻辑比之前的清晰许多，控件支持lua表绑定和lua回调函数绑定
  - 全新的游戏编辑器是使用QT5.3开发，已经支持了windows和mac两个主要平台，编辑器的代码也比之前的版本清晰简练
  - 后续待实现的重要功能:
    1. 控件的事件派发顺序按照控件树的顺序进行派发
    2. 控件的适配方案（noborader，showall等等）
    3. 编辑器支持lua编写的插件；（具体能做到什么程度要看libqtlua库）
    4. 完善编辑器的编辑功能，提供更快捷更友好的操作
- [X] 开发赛车打包工具
- [X] 枪魂luac 64位支持
- [X] 解决枪魂64位解密出错的问题
- [X] 解决部分LabelTTF在64位系统下显示不了得问题
- [X] 增加解密的lua接口
- [X] 实现人物网格和材质合并，从而减少DC；
- [X] 实现赛车网格和材质合并，从而减少DC；
  - 赛车和人物的网格材质合并有细微差别:
    1. 人物有骨骼，合并完mesh后，要把骨骼赋值到mesh上，赛车没有骨骼，不用处理
    2. 人物各部件使用的shader都相同，赛车各部件shader不一样，合并时使用同一个shader的合并在一起（实现的时候把保险杠、车身、尾翼合并在一起，座椅和方向盘合并在一起）
  - 材质合并的主要思路
    - 把贴图合并成一张大贴图，再根据大贴图缩放uv，更新mesh的uv
- [X] 学习编写shader，实现赛车shader中级和低级shader；
- 乐逗技术美术经验分享会议记录: <2015-08-25 Tue>
  1. 美术资源重复利用（出现过2次以上的资源尽量复用）
     1. 把共用的资源做成prefab，以达到在多个场景复用；
     2. 共用资源的贴图合成到一个大贴图中；
     3. 可对共用资源分类；
  2. 网格信息占的空间、内存相对较小，可以考虑通过增加面减少贴图面积；
  3. 在手机上，贴图精度不用要求做得太高；
  4. 通过压扁UV和压扁贴图，可以使本来长方形的贴图变成正方形，可以减少浪费的内存；（长方形贴图在IOS打包时可能会有问题）
  5. 贴图格式的设置可以考虑用工具批量设置；
  6. 赛道的模型可以把 Import Blend Shapes选项取消；（赛道中不会用到）
  7. 赛道的模型的 Import Materials 选项根据美术如何制作材质球而决定是否勾选；
  8. 赛道中Avatar是多余的，可以去掉；（Rig的AnimationType选None即可）
  9. unity动画优化
     1. 减少关键帧；
     2. 合理使用unity的Animation Compression选项压缩动画；
     3. 关键帧的插值方式由欧拉角转为四元数；（可写工具自动转）
  10. 把光照集成到shader里面，shader可以提供以下参数设置（可以参考UnityCG.cginc里面的ObjSpaceLightDir函数计算光照）：
      1. 灯光角度（Direction）
      2. 灯光颜色（LightColor）
      3. 灯光强度（Intensity）
  11. unity里面的屏幕特效（动态模糊等）都比较耗，一般不建议使用；
  12. 漂移轮胎划痕在部分机型层次不对，可能是因为车身shader没有设置正确的RenderQueue；（可以设置为geometry+10等）
  13. 赛道中，想让车受到烘培光照影响，可以使用光照采样Light Probe Group达到效果；
  14. 合并纹理优化，可以把合并的坐标，uv在打包前生成好，运行时合并纹理时直接使用，提高合并速度；
- Unity各平台下图片格式
  1. android如果没有alpha通道可使用ETC1，市面上100%安卓设备支持硬件解压，解压速度快；
  2. IOS如果没有alpha通道可使用PVRTC支持硬件解压，解压速度快；
- 赛车项目组工作总结：
  1. 维护和优化核心玩法，了解了Unity中开发赛车游戏已经相对比较成熟的WheelCollider作为车轮物理计算；
  2. 人物加载和动作播放代码维护；
  3. PVE章节部分逻辑；

