* w9项目

** 集成飞车2的Lua框架
+ UI代码生成工具，拖UI Prefab然后生成代码文件（Reference、View、Model、Config、
  MsgName）
+ 热更新移植

** 开发单局的加载功能
+ 跑通游戏正式流程，用Lua实现单局的加载功能（要考虑可扩展性，目前demo阶段只加载场景即可）

** 整理新工程
*** 工程目录说明
+ Asset
  + ArtResources ==> 存放美术资源
  + Editor ==> 存放编辑器代码
  + LuaScripts ==> Lua代码
  + Plugins ==> 插件类的代码
    + ThirdPart ==> 第三方插件
  + Resources ==> 尽量不放东西，目前临时放了demo相关的资源，后面会删掉
  + ResourcesExt ==> 放正式资源，后面会打成AB
    + Scenes ==> 存放场景文件
    + UI ==> UI相关资源
      + Prefabs ==> UI相关Prefab
      + Atlas ==> UI图集
      + Texture ==> 单张图片
  + Scripts ==> C#代码
  + StreamingAssets


* 工作记录
** 2020-6-29 To 2020-7-4
*** 角色AI寻路路径点第一版本使用碰撞体BoxCollider来制作，主要判断角色是否达到了路径点位置；用碰撞体制作当有比较多数量的碰撞体时，物理开销比较大，因此自己写逻辑判断角色是否到达了路径点，降低物理开销。
*** Unity程序集文件，能够提高编译速度，提高开发效率，但是我们工程的类互相依赖互相引用，导致无法整理好程序集文件
*** 找了个比较符合习惯的代码规范文档模版，调整了下，定了C#编码规范
*** 有些插件的代码封装成了dll，无法修改内部的实现逻辑，我反编译了，把代码替换掉dll，方便开发中根据需求修改
*** 战斗中的C#层代码通过事件方式去掉对XLua的依赖，所以战斗中的代码可以建立程序集，提高开发过程中的编译速度
*** 看到有些第三方库的代码不符合我们项目的编码规范，重名了一些（看到一点就改一点，总有一天会改完的）
*** 整理代码依赖关系，使用程序集
*** 解决FreeLook类型镜头的跟随问题
*** TransfomLook类型镜头跟随增加跟随指定目标的功能
*** 整理Lua编码规范
*** 解决点击按钮无法释放技能的问题，因为底层有个机制：鼠标在UI上会无法使用Ability（注释掉 判断光标是否在UI按钮上）

** 2020-7-6 To 2020-7-10
*** 工作计划：
**** AI死亡后身上的碰撞体没有禁用，依然参与物理计算，武器的击中判断和检测敌人仍然会检测到已死亡的敌人，增加了不必要的运算，这一块要优化掉
**** 整理事件，战斗中的事件名统一在一个文件中声明，方便查找，如果是从动画中发出来的事件，变量名添加Anim前缀区分
**** 编写Animation中事件查看工具
*** 本周工作：
1. 重构插件事件
2. 协助美术制作调效果的环境
3. 把插件状态类的参数抽离，数据跟逻辑分离
4. 查瞄准后FOV无法还原的Bug，从Combat视图切换到TransformLook视图，TransformLook
   视图不支持FOV过渡，加上过渡逻辑
5. 解决无法释放无人机道具的Bug
6. 解决角色视野范围检测有误的Bug，是因为用了角色身体模型作为参考来判断，应该用摄
   像机作为参考判断

** 2020-7-13 To 2020-7-17
*** 工作计划：
1. 定位并解决目前发现的AI行为树的Bug。
2. 继续重构整理UFPS插件的代码，把继承State的状态类的逻辑和数据分离。
3. 帮忙解决组员遇到的技术问题。

*** 本周工作：
1. 整理UFPS事件，合并到主干
2. 定位AI行为树无法刷新路径点问题
3. 反编译行为树代码
4. 重构State的参数配置，使用Array而不是用List，经过测试 10W、100W、1000W次访问，Array的耗时是List的一半左右
   + 数组
     + 优点：比如说数组在内存中是连续存储的，所以它的索引速度是非常的快，而且赋值与修改元素也很简单
     + 缺点：在数组的两个数据间插入数据也是很麻烦的。还有我们在声明数组的时候，必须同时指明数组的长度，数组的长度过长，会造成内存浪费，数组和长度过短，会造成数据溢出的错误。这样如果在声明数组时我们并不清楚数组的长度，就变的很棘手了。
5. 重新写UFPS的编辑器
6. 重构UFPS的底层
