#+TITLE: 2020 Week Report

* 2020-6-29 To 2020-7-4 Week Report

本周工作：
1. 开发无人炸弹飞机技能，功能已经开发完成，策划也验收过效果，后续有优化需求再进
   一步优化效果。[进度：100%]
2. 开发角色行走，摄像机跟随目标对象的功能，AI做预瞄准功能需要用到。[进度：100%]
3. 继续完善C#编码规范文档，规范代码风格，让代码看起来整洁统一。[进度：100%]
4. 编写Lua编码规范文档，统一Lua编码风格，按照以前的编码习惯写了1.0版本文档，后续有
   需要再继续完善补充。[进度：100%]
5. 整理工程代码，使用Unity的程序集定义功能。[进度：100%]

下周工作：
1. 开发AI行为树判断弹药数量功能。
2. 开发AI行为树装备弹药功能。
3. 整理重构战斗中的一些底层逻辑。
4. 帮忙解决组员遇到的技术问题。

本周心流：
1. 在整理工程时我打算把底层比较独立的代码使用Unity程序集定义，这样在修改代码的时
   候能提高编译速度，我发现我们同学写的一些代码相互调用关系不是很合理，上层的代
   码和底层的代码相互依赖调用， 本来底层的代码可以独立定义一个程序集，相互调用后
   就无法定义程序集，因为依赖了一些上层代码的类。我们把一些代码做了重构，使用事
   件通知的方式对一些类进行解耦。
2. 有位同学在开发战斗UI的时候，UI的消息回调没有被调用，他查消息系统代码，发现消
   息系统是通过弱引用的方式保存回调的，被GC后就回调对象就被回收了，他认为底层用
   弱引用是不合理的，想改掉，我认为底层用弱引用是相对更安全的做法，因为使用弱引
   用保存回调，即使监听回调忘记做手动移除了，消息系统也不会持有对象引用，回调对
   象的销毁不受消息系统影响，所以这样是降低了内存泄漏概率。

* 2020-7-6 To 2020-7-10 Week Report

本周工作：
1. 重构整理UFPS插件的事件。 【进度：100%】
2. 为美术同学制作调美术效果的环境。 【进度：100%】
3. 定位并解决取消瞄准后摄像机FOV无法还原的Bug。 【进度：100%】
4. 定位并解决无人机道具无法释放的Bug。 【进度：100%】
5. 定位并解决角色视野检测有误的Bug，因为检测的前方是使用了角色身体模型，应该用摄
   像机的前方方向检测。 【进度：100%】
6. 重构整理UFPS插件的代码，把继承State的状态类的逻辑和数据分离。(类比较多，是个
   漫长的过程) 【进度：30%】

下周工作：
1. 定位并解决目前发现的AI行为树的Bug。
2. 继续重构整理UFPS插件的代码，把继承State的状态类的逻辑和数据分离。
3. 帮忙解决组员遇到的技术问题。

本周心流：
1. 这周开始，计划逐步对UFPS进行重构调整，代码改动可能比较大，为了不影响demo功能
   的正常开发， 我开了一个分支来进行重构，等调整得差不多了，就把代码合并到demo主
   干上。
2. UFPS插件中的事件没有分类和集中声明，在查找代码引用的时候会比较麻烦，因此我对
   UFPS插件的事件进行了分类整理，把调用的代码也做了些调整修改。吐槽一下：这个
   插件的事件真多，内部运作的事件就有160多个。-_-!
3. UFPS插件的配置大量依赖了Unity的预制preset，preset中配置了要修改的对象的属性名
   和值，在运行中通过反射的方式修改对象的属性，这种方式很灵活，但是我们担心这种
   方式在性能上会有问题，也为了日后项目中可以用配表的方式配置，我们打算重构这一
   块，要对State类做改造，继承State的类也都要改，工作量大大的。=_=!
4. 这周美术同学想调优一些美术效果，发现工程里面的缺少一个稳定的场景给他们调效果，
   导致他们无法比较顺利地调优，接到他们的反馈后，程序这边尽快给他们整理了一个环
   境给他们调整效果，最后效果及时的加到了战斗中。
5. 在查Bug的时候，在开发过程中，有些同学的工作可能会依赖能正常跑起来的功能，因此我们在开发功能
   时Commit到svn上的代码、配置等资源时要细心检查，尽量保证提交到svn上的功能是正
   常能跑的，尽量做到不要报错卡流程。

* 2020-7-13 To 2020-7-17 Week Report

本周工作：
1. 在分支上整理重构UFPS事件，区分内部事件、外部事件、UI事件三类，并且合并到主干
   上。 【进度：100%】
2. 定位和解决AI行为树无法刷新路径点问题。 【进度：100%】
3. 反编译Behavior Designer插件代码。 【进度：100%】
4. 重构State的参数配置，重新写一个统一配置参数的类代替插件中的反射机制。 【进度：
   40%】
5. 编写UFPS的配置参数的编辑器工具（参数类重新写了，所以编辑器也要重新写）。 【进度：20%】
6. 重构UFPS的底层，去掉一些复杂逻辑，涉及的代码有点多。 【进度：20%】

下周工作：
1. 重构State的参数配置，各个State的子类的参数读取部分都要调整。
2. 编写UFPS各个类的配置参数的编辑器工具。
3. 重构UFPS的底层，去掉一些复杂逻辑。
4. 帮忙解决组员遇到的技术问题。

本周心流：
1. 我们项目中的行为树用了Unity的Behavior Designer插件，这个插件在unity上比较成熟，在
   unity上使用也比较方便，目前发现最大的问题是没有源码，万一后面想要自己加一些功能或
   者修复一些Bug的时候就很不方便了。为了方便日后项目维护和扩展，我用dnSpy工具对
   插件dll进行反编译。dnSpy工具虽然很强大，但是反编译处理的代码并不是直接能用的，
   有比较多的报错，我花了不少时间对报错的代码进行了修改和调整，最终代码放到工程
   中正常运行没问题了。
2. 在编写State参数配置类的时候，考虑到可以配置多个、多种参数，因此需要用到Array或
   者List。读取参数的逻辑主要是通过下标从数组中取值，并不会频繁插入和删除数据，
   最终决定用Array，因为Array的优点是：在内存中是连续存储的，所以它的索引速度是
   非常的快，而且赋值与修改元素也很简单。为了谨慎也好奇两种数据结构性能差多少，
   我对List和Array做了简单的性能测试，分别做了10W、100W、1000W次访问数据， Array
   的耗时是List的一半左右。我们平时写代码的时候还是要重视性能问题，选择正确的数
   据结构和算法对性能提升有较大的帮助。
