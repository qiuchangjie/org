#+SEQ_TODO:NEXT(n) TODO(t) WAITING(w) BUG(b) | DONE(d) CANCELLED(c)
* 飞车 2020 年
- [X] 档位适配（主城中、序章中）
- [X] 新部署飞车 2 Jenkins 平台
- [X] 滑行漂移胎焰 
- [X] 胎焰增加顶点色透明度 
- [X] 胎痕的起点位置优化 
- [X] 重新挑战，删掉旧胎痕对象 
- [X] 单局内刘海屏缩进 0.4，单局外另外配置 0.6
- [X] 实现赛车新技巧：段位漂移、反漂充能

** 2020年2月
*** 断网重连调整方案
+ 客户端网络层实现发送队列，当断网重连后，重新发送断网时没有发出去的网络包，能保
  证断网重连后在当前UI的数据是新的

** 2020年4月
*** 第一次运行游戏时，复制AB压缩包和解压AB压缩包时间过长，导致大量玩家流失
+ APK中AB是压缩到一个压缩包中，在第一次运行游戏时先拷贝压缩包到下载目录，然后解
  压AB到下载目录。
+ APK本身是一个压缩文件(其它平台不是压缩文件)，其实AB压缩包在APK中的情况就是压缩文件中带一个压缩文件，
  其实是不需要拷贝出来的，而是直接打开APK中的AB压缩包，然后对AB压缩包进行解压，
  这样就能节省拷贝的时间了。

*** 解压速度过慢，需要做优化
+ APK中AB是压缩到一个压缩包中，在第一次运行游戏时解压到下载目录，解压过程比较耗
  时，需要优化。
+ 仔细看了下代码，发现写文件是用单线程逐个写入，类似数组从头遍历那样。我发现可以
  做个修改，也方便测试:
  既然是数组的遍历方式，那么可以对数据进行平均分块，分多个线程一起遍历数组，每个
  线程只负责遍历和写入分块部分的文件即可(分块数和线程数参数化)。
  + 我自己电脑上测试数据是：
    + PC 1个线程解压耗时 215.14秒
    + PC 2个线程解压耗时 129.917秒
    + PC 4个线程解压耗时 104.332秒
    + PC 8个线程解压耗时 80.017秒
  + 手机OPPO A5上测试数据是：
    + OPPO A5 1个线程解压耗时 124秒
    + OPPO A5 8个线程解压耗时 40秒

** 2020年4月
*** 车船等物理同步位置方法有三种(摘自 腾讯游戏开发精粹)：
+ 1.设置位置：这种会照成物体瞬移，并且在物理模拟上不够逼真。不推荐这种方法。
+ 2.设置速度：通过计算位置差求出速度，在物理引擎进行物理模拟前应用到动态刚体上。
  这种方法比较顺滑，适合绝大多数情况。有时会因为位置偏差照成第三方物体被其它刚
  体卡住，此时就需要设置位置。
+ 3.设置力：这种方法增加了一层间接性，控制难度加大。

** 2020年5月
*** 开发小包功能，传统的封装加载GameObject接口的方式制作起来比较难处理下载完资源后回调问题
+ 引进加载器的概念，加载器负责把资源加载、实例化以及管理GameObject，程序逻辑通过调
  用加载器来使用GameObjet

*** 使用FileStream.Write写文件覆盖原文件时，当写入的data大小小于原文件大小，则会残留旧文件大小，需要注意这个问题。

** 2020年6月
*** 关于飞车2防外挂的一些思考
+ 飞车1在上线的时候，由于防外挂意识薄弱，导致上线不久后被外挂各种虐，为此还打了
  不少针对外挂的补丁。
+ 目前发现的外挂主要有：修改本地的赛车数值、加速外挂这两种，当外挂的作者摸清了我
  们的数值主要是存在客户端就可以尝试各种方法去查找内存并修改。
+ 想要在一定程度上提高制作外挂的门槛，有一些简单的做法：
  + 1.客户端本地的关键数值必须要经过内存加密。
  + 2.把一些关键的数值放在服务器上，客户端定时上报这些关键数值，当数值跟服务器的
    数值不相等时，服务器认为是外挂修改了数值，并把玩家提下线。
  + 3.把关键数值存在服务器，比赛中由服务器定时下发关键数值，客户端收到数值后刷新
    本地的数值。
  + 4.赛车游戏比较重要的数值就是赛车的加速度，比赛内的赛车加速度可以由服务器下发
    下来，客户端再使用该加速度进行提速，改方法可能对服务器要求比较高。
