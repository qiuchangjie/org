* Unity3D 重要函数方法
** 函数
*** Update
- 当MonoBehaviour启用时，其Update在每一帧被调用。
*** LateUpdate
- 当Behaviour启用时，其LateUpdate在每一帧被调用。
*** FixedUpdate
- 当MonoBehaviour启用时，其固定时间调用一次。
*** Awake
- 当一个脚本实例被载入时Awake被调用。
*** Start
- Start仅在Update函数第一次被调用前调用。
*** Reset
- 重置为默认值。
*** OnMouseEnter
- 当鼠标进入到GUIElement(GUI元素)或Collider(碰撞体)中时调用OnMouseEnter。
*** OnMouseOver
- 当鼠标悬浮在GUIElement(GUI元素)或Collider(碰撞体)上时调用 OnMouseOver。
*** OnMouseExit
- 当鼠标移出GUIElement(GUI元素)或Collider(碰撞体)上时调用OnMouseExit。
*** OnMouseDown
- 当鼠标在GUIElement(GUI元素)或Collider(碰撞体)上点击时调用OnMouseDown。
*** OnMouseUp
- 当用户释放鼠标按钮时调用OnMouseUp。
*** OnMouseUpAsButton
- OnMouseUpAsButton只有当鼠标在同一个GUIElement或Collider按下，在释放时调用。
*** OnMouseDrag
- 当用户鼠标拖拽GUIElement(GUI元素)或Collider(碰撞体)时调用 OnMouseDrag 。
*** OnTriggerEnter
- 当Collider(碰撞体)进入trigger(触发器)时调用OnTriggerEnter。
*** OnTriggerExit
- 当Collider(碰撞体)停止触发trigger(触发器)时调用OnTriggerExit。
*** OnTriggerStay
- 当碰撞体接触触发器时，OnTriggerStay将在每一帧被调用。
*** OnCollisionEnter
- 当此collider/rigidbody触发另一个rigidbody/collider时，OnCollisionEnter将被调用。
*** OnCollisionExit
- 当此collider/rigidbody停止触发另一个rigidbody/collider时，OnCollisionExit将被调用。
*** OnCollisionStay
- 当此collider/rigidbody触发另一个rigidbody/collider时，OnCollisionStay将会在每一帧被调用。
*** OnControllerColliderHit
- 在移动的时，当controller碰撞到collider时OnControllerColliderHit被调用。
*** OnJointBreak
- 当附在同一对象上的关节被断开时调用。
*** OnParticleCollision
- 当粒子碰到collider时被调用。
*** OnBecameVisible
- 当renderer(渲染器)在任何相机上可见时调用OnBecameVisible。
*** OnBecameInvisible
- 当renderer(渲染器)在任何相机上都不可见时调用OnBecameInvisible。
*** OnLevelWasLoaded
- 当一个新关卡被载入时此函数被调用。
*** OnEnable
- 当对象变为可用或激活状态时此函数被调用。
*** OnDisable
- 当对象变为不可用或非激活状态时此函数被调用。
*** OnDestroy
- 当MonoBehaviour将被销毁时，这个函数被调用。
*** OnPreCull
- 在相机消隐场景之前被调用。
*** OnPreRender
- 在相机渲染场景之前被调用。
*** OnPostRender
- 在相机完成场景渲染之后被调用。
*** OnRenderObject
- 在相机场景渲染完成后被调用。
*** OnWillRenderObject
- 如果对象可见每个相机都会调用它。
*** OnGUI
- 渲染和处理GUI事件时调用。
*** OnRenderImage
- 当完成所有渲染图片后被调用，用来渲染图片后期效果。
*** OnDrawGizmosSelected
- 如果你想在物体被选中时绘制gizmos，执行这个函数。
*** OnDrawGizmos
- 如果你想绘制可被点选的gizmos，执行这个函数。
*** OnApplicationPause
- 当玩家暂停时发送到所有的游戏物体。
*** OnApplicationFocus
- 当玩家获得或失去焦点时发送给所有游戏物体。
*** OnApplicationQuit
- 在应用退出之前发送给所有的游戏物体。
*** OnPlayerConnected
- 当一个新玩家成功连接时在服务器上被调用。
*** OnServerInitialized
- 当Network.InitializeServer被调用并完成时，在服务器上调用这个函数。
*** OnConnectedToServer
- 当你成功连接到服务器时，在客户端调用。
*** OnPlayerDisconnected
- 当一个玩家从服务器上断开时在服务器端调用。
*** OnDisconnectedFromServer
- 当失去连接或从服务器端断开时在客户端调用。
*** OnFailedToConnect
- 当一个连接因为某些原因失败时在客户端调用。
*** OnFailedToConnectToMasterServer
- 当报告事件来自主服务器时在客户端或服务器端调用。
*** OnMasterServerEvent
- 当报告事件来自主服务器时在客户端或服务器端调用。
*** OnNetworkInstantiate
- 当一个物体使用Network.Instantiate进行网络初始化时调用。
*** OnSerializeNetworkView
- 在一个网络视图脚本中，用于自定义变量同步。

** Unity3D中自带事件函数的执行顺序
*** 在Unity3D脚本中，有几个Unity3D自带的事件函数按照预定的顺序执行作为脚本执行。其执行顺序如下：
**** 编辑器（Editor）
***** Reset
- Reset函数被调用来初始化脚本属性当脚本第一次被附到对象上，并且在Reset命令被使用时也会调用。
- 编者注：Reset是在用户点击Inspector面板上Reset按钮或者首次添加该组件时被调用。Reset最常用于在见识面板中给定一个默认值。
**** 第一次场景加载（First Scene Load）
- *这些函数会在一个场景开始（场景中每个物体只调用一次）时被调用。*
***** Awake
- 这个函数总是在任何Start()函数之前一个预设被实例化之后被调用，如果一个GameObject是非激活的（inactive），在启动期间Awake函数是不会被调用的直到它是活动的（active）。
***** OnEnable
- 只有在对象是激活（active）状态下才会被调用，这个函数只有在object被启用（enable）后才会调用。这会发生在一个MonoBehaviour实例被创建，例如当一个关卡被加载或者一个带有脚本组件的GameObject被实例化。
- *注意：当一个场景被添加到场景中，所有脚本上的Awake()和OnEable()函数将会被调用在Start()、Update()等它们中任何函数被调用之前。自然的，当一个物体在游戏过程中被实例化时这不能被强制执行。*
**** 第一帧更新之前（Before the first frame update）
***** Start
- 只要脚本实例被启用了Start()函数将会在Update()函数第一帧之前被调用。
- 对于那些被添加到场景中的物体，所有脚本上的Start()函数将会在它们中任何的Update()函数之前被调用，自然的，当一个物体在游戏过程中被实例化时这不能被强制执行。
**** 在帧之间（In between frames）
***** OnApplicationPause
- 这个函数将会被调用在暂停被检测有效的在正常的帧更新之间的一帧的结束时。在OnApplicationPause被调用后将会有额外的一帧用来允许游戏显示显示图像表示在暂停状态下。
**** 更新顺序（Update Order）
- *当你在跟踪游戏逻辑和状态，动画，相机位置等的时候，有几个不同的事件函数你可以使用。常见的模式是在Update()函数中执行大多数任务，但是也有其它的函数你可以使用。*
***** FixedUpdate
- FixedUpdate函数经常会比Update函数更频繁的被调用。它一帧会被调用多次，如果帧率低它可能不会在帧之间被调用，就算帧率是高的。所有的图形计算和更新在FixedUpdate之后会立即执行。当在FixedUpdate里执行移动计算，你并不需要Time.deltaTime乘以你的值，这是因为FixedUpdate是按真实时间，独立于帧率被调用的。
***** Update
- Update每一帧都会被调用，对于帧更新它是主要的负荷函数。
***** LateUpdate
- LateUpdate会在Update结束之后每一帧被调用，任何计算在Update里执行结束当LateUpdate开始时。LateUpdate常用为第三人称视角相机跟随。
**** 渲染（Rendering）
***** OnPreCull
- 在相机剔除场景前被调用。剔除是取决于哪些物体对于摄像机是可见的，OnPreCull仅在剔除起作用之前被调用。
***** OnBecameVisible/OnBecameInvisible
- 当一个物体对任意摄像机变得可见/不可见时被调用。
***** OnPreRender
- 在摄像机开始渲染场景之前调用。
***** OnRenderObject
- 在指定场景渲染完成之后调用，你可以使用GL类或者Graphics.DrawMeshNow 来绘制自定义几何体在这里。
***** OnPostRender 
- 在摄像机完成场景渲染之后调用。
***** OnRenderImage(Pro Only)
- 在场景徐然完成之后允许屏幕图像后期处理调用。
***** OnGUI
- 为了响应GUI事件，每帧会被调用多次（一般最低两次）。布局Layout和Repaint事件会首先处理，接下来处理的是是通过Layout和键盘/鼠标事件对应的每个输入事件。
***** OnDrawGizmos
- 用于可视化的绘制一些小玩意在场景视图中。
**** 协同程序（Coroutines）
- *正常的协同程序更新是在Update函数返回之后运行。一个协同程序是可以暂停执行（yield）直到给出的依从指令（YieldInstruction ）完成，写成的不同运用：*
***** yield
- 在所有的Update函数都已经被调用的下一帧该协程将持续执行。
***** yield WaitForSeconds
- 一段指定的时间延迟之后继续执行，在所有的Update函数完成调用的那一帧之后。
***** yield WaitForFixedUpdate
- 所有脚本上的FixedUpdate函数已经执行调用之后持续。
***** yield WWW
- 在WWW下载完成之后持续。
***** yield StartCoroutine
- 协同程序链，将会等到MuFunc函数协程执行完成首先。
**** 销毁（When the Object is Destroyed）
***** OnDestory
- 这个函数在会在一个对象销毁前一帧调用，会在所有帧更新一个对象存在的最后一帧之后执行，对象也许会响应Object.Destroy 或一个场景关闭时被销毁。
**** 退出游戏（When Quitting）
- *这些函数会在你场景中所有的激活的物体上调用：*
***** OnApplicationQuit
- 这个函数在应用退出之前的所有游戏物体上调用，在编辑器（Editor）模式中会在用户停止PlayMode时调用，在网页播放器（web player）中会在网页视图关闭时调用。
***** OnDisable
- 当行为变为非启用（disable）或非激活（inactive）时调用。
*** 脚本的生命周期流程图
[[file:pictures/unity3d-vital.png]]
