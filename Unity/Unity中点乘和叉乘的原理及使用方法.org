* Unity 中点乘和叉乘的原理及使用方法
　　Unity 游戏开发中经常会用到向量的运算来计算目标的方位，朝向，角度等相关数据，为此下面要给大家介绍的就是 Unity 中点乘和叉乘的使用方法，一起来看看吧。

** 点乘
　　（又称"点积","数量积”,"内积"）（Dot Product, 用＊）
　　
　　定义：a•b=|a|•|b|cos 【注：粗体小写字母表示向量，表示向量 a,b 的夹角，取值范围为[0，180]】
　　
　　几何意义：是一条边向另一条边的投影乘以另一条边的长度.

    [[file:pictures/unity-cos.jpg]]

　　v1 和 v2 向量的点乘运算：相应元素的乘积的和：v1( x1, y1，z1) * v2(x2, y2,z2) = x1*x2 + y1*y2+z1*z2;
　　
　　注意 : 结果不是一个向量，而是一个标量。
　　
　　性质 1：a*b = |a||b|Cos(θ) ，θ是向量 a 和向量 b 之间的夹角。　　
　　性质 2：a*b = b*a  满足乘法交换律

*** Unity 项目应用：
　　1.根据点乘计算两个向量的夹角。= arccos(a•b / (|a|•|b|))
　　
　　2.根据点乘的正负值，得到夹角大小范围，>0，则夹角（0,90）<0,则夹角（90,180），可以利用这点判断一个多边形是面向摄像机还是背向摄像机。
　　
　　3.根据点乘的大小，得到向量的投影长度，反应了向量的长度关系。
　　
　　4.在生产生活中，点积同样应用广泛。利用点积可判断一个多边形是否面向摄像机还是背向摄像机。向量的点积与它们夹角的余弦成正比，因此在聚光灯的效果计算中，可以根据点积来得到光照效果，如果点积越大，说明夹角越小，则物理离光照的轴线越近，光照越强。物理中，点积可以用来计算合力和功。若 b 为单位矢量，则点积即为 a 在方向 b 的投影，即给出了力在这个方向上的分解。功即是力和位移的点积。计算机图形学常用来进行方向性判断，如两矢量点积大于 0，则它们的方向朝向相近；如果小于 0，则方向相反。矢量内积是人工智能领域中的神经网络技术的数学基础之一，此方法还被用于动画渲染（Animation-Rendering）。

** 叉乘
　　（又称"叉积","向量积","外积"）（cross product，用 x）
　　
　　定义：c = a x b，其中 a b c 均为向量
　　
　　几何意义是：得到一个与这两个向量都垂直的向量，这个向量的模是以两个向量为边的平行四边形的面积
　　
　　v1 和 v2 向量的叉乘运算：相应元素的乘积的和：v1( x1, y1，z1) x v2(x2, y2, z2) = (y1*z2 - y2*z1)i+(x2*z1 - x1*z2)j+(x1*y2-x2*y1)k;
　　
　　利用三阶行列式计算
　　
　　|i    j   k|
　　
　　|x1  y1  z1|
　　
　　|x2   y2  z2|
　　
　　性质 1：c⊥a，c⊥b，即向量 c 与向量 a，b 所在平面垂直
　　
　　性质 2：模长|c| = |a||b| sin
　　
　　性质 3：(数学上)满足右手法则, a x b = -b x a，所以我们可以使用叉乘的正负值来判断 a，b 的相对位置，即 b 是处于 a 的顺时针还是逆时针方向。
　　
　　叉乘的右手定则是用来确定叉乘积的方向的。
　　
　　右手法则：右手的四指方向指向第一个矢量,屈向叉乘矢量的夹角方向（两个矢量夹角方向取小于 180°的方向）,那么此时大拇指方向就是叉乘所得的叉乘矢量的方向.（大拇指应与食指成九十度）（注意：Unity 当中使用左手，因为 Unity 使用的是左手坐标系）

    [[file:pictures/unity-right-hand.png]]

　　数学上叉乘的右手法则

    [[file:pictures/unity-left-hand.png]]

    Unity 当中叉乘的左手法则

*** Unity 项目应用：
　　
    1.根据叉乘得到 a，b 向量的相对位置，和顺时针或逆时针方位。

    简单的说: 点乘判断角度，叉乘判断方向。

    形象的说: 当一个敌人在你身后的时候，叉乘可以判断你是往左转还是往右转更好的转向敌人，点乘得到你当前的面朝向的方向和你到敌人的方向的所成的角度大小。

    2.得到 a，b 夹角的正弦值，计算向量的夹角（0,90），可以配合点乘和 Angle 方法计算出含正负的方向。

    3.根据叉乘大小，得到 a，b 向量所形成的平行四边形的面积大小，根据面积大小得到向量的相对大小。

*下面是代码：*

#+BEGIN_SRC C

using UnityEngine;  

public class VectorExample : MonoBehaviour
{  
    //点积  
    private void TestDot(Vector3 a, Vector3 b)  
    {  
        // 计算 a、b 点积结果  
        float result = Vector3.Dot(a, b);  
   
        // 通过向量直接获取两个向量的夹角（默认为 角度）， 此方法范围 [0 - 180]  
        float angle = Vector3.Angle(a, b);  
   
        // 计算 a、b 单位向量的点积,得到夹角余弦值,|a.normalized|*|b.normalized|=1;  
        result = Vector3.Dot(a.normalized, b.normalized);  
        // 通过反余弦函数获取 向量 a、b 夹角（默认为 弧度）  
        float radians = Mathf.Acos(result);  
        // 将弧度转换为 角度  
        angle = radians * Mathf.Rad2Deg;  
    }  
   
    //叉乘  
    private void TestCross(Vector3 a, Vector3 b)  
    {  
        //计算向量 a、b 的叉积，结果为 向量   
        Vector3 c = Vector3.Cross(a, b);  
   
        // 通过反正弦函数获取向量 a、b 夹角（默认为弧度）  
        float radians = Mathf.Asin(Vector3.Distance(Vector3.zero, Vector3.Cross(a.normalized, b.normalized)));  
        float angle = radians * Mathf.Rad2Deg;  
   
        // 判断顺时针、逆时针方向，是在 2D 平面内的，所以需指定一个平面，  
        //下面以 X、Z 轴组成的平面为例 , (Y 轴为纵轴),  
        // 在 X、Z 轴平面上，判断 b 在 a 的顺时针或者逆时针方向,  
        if (c.y > 0)  
        {  
            // b 在 a 的顺时针方向  
        }  
        else if (c.y == 0)  
        {  
            // b 和 a 方向相同（平行）  
        }  
        else 
        {  
            // b 在 a 的逆时针方向  
        }  
    }  
   
    // 获取两个向量的夹角  Vector3.Angle 只能返回 [0, 180] 的值  
    // 如真实情况下向量 a 到 b 的夹角（80 度）则 b 到 a 的夹角是（-80）  
    // 通过 Dot、Cross 结合获取到 a 到 b，b 到 a 的不同夹角  
    private void GetAngle(Vector3 a, Vector3 b)  
    {  
        Vector3 c = Vector3.Cross(a, b);  
        float angle = Vector3.Angle(a, b);  
   
        // b 到 a 的夹角  
        float sign = Mathf.Sign(Vector3.Dot(c.normalized, Vector3.Cross(a.normalized, b.normalized)));  
        float signed_angle = angle * sign;  
   
        Debug.Log("b -> a :" + signed_angle);  
   
        // a 到 b 的夹角  
        sign = Mathf.Sign(Vector3.Dot(c.normalized, Vector3.Cross(b.normalized, a.normalized)));  
        signed_angle = angle * sign;  
   
        Debug.Log("a -> b :" + signed_angle);  
    }  
}  
#+END_SRC
